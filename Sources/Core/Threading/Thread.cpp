#include "EGEThread.h"
#include "EGEDebug.h"

#ifdef EGE_THREAD_PTHREAD
  #include "Core/Threading/PThread/Thread_p.h"
#endif // EGE_THREAD_PTHREAD

EGE_NAMESPACE_BEGIN

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
EGE_DEFINE_NEW_OPERATORS(Thread)
EGE_DEFINE_DELETE_OPERATORS(Thread)
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Thread::Thread() 
: Object(EGE_OBJECT_UID_THREAD)
, m_stopping(false)
, m_exitCode(0)
{
  m_p = ege_new ThreadPrivate(this);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Thread::~Thread()
{
  stop(0);
  wait();

  EGE_DELETE(m_p);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
bool Thread::isValid() const
{
  return (NULL != m_p);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
bool Thread::start()
{
  EGE_ASSERT(isValid());

  // reset data
  m_stopping.store(false);
  m_exitCode = 0;

  if (m_p)
  {
    // start
    return m_p->start();
  }

  return true;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
bool Thread::isRunning() const
{
  EGE_ASSERT(isValid());
  if (m_p)
  {
    return m_p->isRunning();
  }

  return false;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
bool Thread::isFinished() const
{
  EGE_ASSERT(isValid());
  if (m_p)
  {
    return m_p->isFinished();
  }

  return false;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
void Thread::stop(s32 exitCode)
{
  EGE_ASSERT(isValid());

  m_stopping.store(true);
  m_exitCode = exitCode;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
bool Thread::isStopping() const
{
  return m_stopping.load();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
bool Thread::wait()
{
  EGE_ASSERT(isValid());
  if (m_p && m_p->isRunning())
  {
    return m_p->wait();
  }

  return false;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
void Thread::cancel()
{
  EGE_ASSERT(isValid());
  if (m_p && m_p->isRunning())
  {
    m_p->cancel();
  }
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

EGE_NAMESPACE_END