#include "Core/Timer/Interface/Time.h"

EGE_NAMESPACE

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Time::Time() : m_time(0)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Time::Time(s64 microseconds) : m_time(microseconds)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Time::Time(const Time& time) : m_time(time.m_time)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Time::Time(float32 seconds) : m_time(static_cast<s64>(seconds * 1000000LL))
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
bool Time::operator > (const Time& other) const
{
  return m_time > other.m_time;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
bool Time::operator >= (const Time& other) const
{
  return m_time >= other.m_time;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
bool Time::operator < (const Time& other) const
{
  return m_time < other.m_time;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
bool Time::operator <= (const Time& other) const
{
  return m_time <= other.m_time;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
bool Time::operator == (const Time& other)
{
  return m_time == other.m_time;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
bool Time::operator != (const Time& other)
{
  return m_time != other.m_time;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Time& Time::operator = (float32 seconds)
{
  m_time = static_cast<s64>(seconds * 1000000LL);
  return *this;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Time& Time::operator = (s64 microseconds)
{
  m_time = microseconds;
  return *this;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Time& Time::operator += (const Time& other)
{
  m_time += other.m_time;
  return *this;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Time& Time::operator -= (const Time& other)
{
  m_time -= other.m_time;
  return *this;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Time& Time::operator = (const Time& other)
{
  if (this != &other)
  {
    m_time = other.m_time;
  }
  
  return *this;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
void Time::fromMicroseconds(s64 microseconds)
{
  m_time = microseconds;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
void Time::fromMiliseconds(s64 miliseconds)
{
  m_time = miliseconds * 1000LL;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
void Time::fromSeconds(float32 seconds)
{
  m_time = static_cast<s64>(seconds * 1000000LL);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
s64 Time::microseconds() const
{
  return m_time;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
s64 Time::miliseconds() const
{
  return m_time / 1000;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
float32 Time::seconds() const
{
  return m_time / 1000000.0f;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
float32 Time::minutes() const
{
  return m_time / 60000000.0f;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------