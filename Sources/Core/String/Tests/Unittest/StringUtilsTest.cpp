#include "TestFramework/Interface/TestBase.h"
#include <EGEStringUtils.h>
#include <string>

EGE_NAMESPACE

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
class StringUtilsTest : public TestBase
{
  protected:

    static void SetUpTestCase();
    static void TearDownTestCase();

  protected:

    virtual void SetUp();
    virtual void TearDown();

  protected:
};
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
void StringUtilsTest::SetUpTestCase()
{
  EXPECT_TRUE(MemoryManager::Initialize());
  }
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
void StringUtilsTest::TearDownTestCase()
{
  MemoryManager::Deinitialize();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
void StringUtilsTest::SetUp()
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
void StringUtilsTest::TearDown()
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
TEST_F(StringUtilsTest, IsWhiteSpace)
{
  const std::string KWhiteSpaces = " \t\n\r\v\f";

  // go thru Ascii range
  for (s32 c = 0; c < 128; ++c)
  {
    // check if character is a white space
    const bool expectedWhitespaceFlag = (std::string::npos != KWhiteSpaces.find(static_cast<char>(c)));

    EXPECT_EQ(expectedWhitespaceFlag, StringUtils::IsWhiteSpace(static_cast<char>(c)));
  }
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
TEST_F(StringUtilsTest, ToInt)
{
  //bool error = false;

  //// empty string conversion
  //StringUtils::ToInt("", &error);
  //EXPECT_TRUE(error);

  //// invalid values
  //error = false;
  //StringUtils::ToInt("Dummy Text", &error);
  //EXPECT_TRUE(error);

  //error = false;
  //StringUtils::ToInt("@123", &error);
  //EXPECT_TRUE(error);

  //error = false;
  //string = "123$";
  //StringUtils::ToInt(&error);
  //EXPECT_TRUE(error);

  //error = false;
  //string = "123.90";
  //StringUtils::ToInt(&error);
  //EXPECT_TRUE(error);

  //// valid values
  //error = false;
  //string = "3890";
  //EXPECT_EQ(3890, StringUtils::ToInt(&error));
  //EXPECT_FALSE(error);

  //string = "+4590";
  //EXPECT_EQ(4590, StringUtils::ToInt(&error));
  //EXPECT_FALSE(error);

  //string = "-2147483648";
  //EXPECT_EQ(-2147483647 - 1, StringUtils::ToInt(&error));
  //EXPECT_FALSE(error);

  //string = "2147483647";
  //EXPECT_EQ(2147483647, StringUtils::ToInt(&error));
  //EXPECT_FALSE(error);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
TEST_F(StringUtilsTest, ToUInt)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
TEST_F(StringUtilsTest, ToInt64)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
TEST_F(StringUtilsTest, ToUInt64)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
TEST_F(StringUtilsTest, FromHex)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
TEST_F(StringUtilsTest, ToColor)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
TEST_F(StringUtilsTest, ToRectf)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
TEST_F(StringUtilsTest, ToRecti)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
TEST_F(StringUtilsTest, ToVector2f)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
TEST_F(StringUtilsTest, ToVector2i)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
TEST_F(StringUtilsTest, ToVector3f)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
TEST_F(StringUtilsTest, ToVector4f)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
TEST_F(StringUtilsTest, ToVector4i)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
TEST_F(StringUtilsTest, ToAlignment)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
TEST_F(StringUtilsTest, ToAngle)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
TEST_F(StringUtilsTest, ToTime)
{
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
