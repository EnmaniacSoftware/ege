#include "Core/Timer/Timer.h"

#ifdef EGE_PLATFORM_WIN32
#include "Win32/Timer/TimerWin32_p.h"
#elif EGE_PLATFORM_AIRPLAY
#include "Airplay/Timer/TimerAirplay_p.h"
#endif

EGE_NAMESPACE

//--------------------------------------------------------------------------------------------------------------------------------------------------------------

EGE_DEFINE_NEW_OPERATORS(Timer)
EGE_DEFINE_DELETE_OPERATORS(Timer)

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Timer::Timer(Application* app) : Object(app)
{
  m_p = ege_new TimerPrivate(this);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Timer::~Timer()
{
  EGE_DELETE(m_p);
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
/*! Resets timer. */
void Timer::reset()
{
  p_func()->reset();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
/*! Returns number of miliseconds passed so far. */
s64 Timer::milliseconds()
{
  return p_func()->milliseconds();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
/** Returns number of microseconds passed so far.
*
*   If less resolution is available only, it is upscaled to microseconds.
*/
s64 Timer::microseconds()
{
  return p_func()->microseconds();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
/*! Returns TRUE if timer is high performace timer. */
bool Timer::isHighResolution() const
{
  return p_func()->isHighResolution();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
/*! Returns TRUE if object is valid. */
bool Timer::isValid() const
{
  return NULL != m_p;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
