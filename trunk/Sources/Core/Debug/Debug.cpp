#include "Core/Debug/Debug.h"

EGE_NAMESPACE_BEGIN

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug::Debug(DebugMsgType type) : m_consoleOutput(true),
                                  m_spaceSeperated(true),
                                  m_type(type)
{
  // allocate buffer
  m_buffer = ege_new StringBuffer();
  if (NULL != m_buffer)
  {
    // init depending on type
    switch (m_type)
    {
      case DMT_WARNING:   *m_buffer << "WARNING: "; break;
      case DMT_CRITICAL:  *m_buffer << "CRITICAL: "; break;
      
      default:
        break;
    }
  }
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug::Debug(const Debug& other)
{
  *this = other;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug::~Debug()
{
  // check if last instance
  if ((NULL != m_buffer) && (1 == m_buffer->referenceCount()))
  {
    // check if printable to console
    if (m_consoleOutput)
    {
      Print(m_buffer->string().toAscii());
    }
  }

  // clean up
  m_buffer = NULL;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug& Debug::operator << (bool t)
{ 
  *m_buffer << t;
  return maybeSpace();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug& Debug::operator << (char t)
{ 
  *m_buffer << t;
  return maybeSpace();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug& Debug::operator << (Char t) 
{ 
  *m_buffer << t;
  return maybeSpace();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug& Debug::operator << (s16 t) 
{ 
  *m_buffer << t;
  return maybeSpace();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug& Debug::operator << (u16 t) 
{ 
  *m_buffer << t;
  return maybeSpace();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug& Debug::operator << (s32 t) 
{ 
  *m_buffer << t;
  return maybeSpace();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug& Debug::operator << (u32 t) 
{ 
  *m_buffer << t;
  return maybeSpace();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
//Debug& Debug::operator << (size_t t)
//{
//  m_buffer += String::Format("%lu", t);
//  return maybeSpace();
//}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug& Debug::operator << (s64 t) 
{ 
  *m_buffer << t;
  return maybeSpace();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug& Debug::operator << (u64 t) 
{ 
  *m_buffer << t;
  return maybeSpace();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug& Debug::operator << (float32 t) 
{ 
  *m_buffer << t;
  return maybeSpace();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug& Debug::operator << (const char* t) 
{ 
  *m_buffer << t;
  return maybeSpace();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug& Debug::operator << (const String& t)
{
  *m_buffer << t;
  return maybeSpace();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug& Debug::operator << (const void* t) 
{ 
  *m_buffer << t;
  return maybeSpace();
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug& Debug::operator = (const Debug& other)
{
  if (this != &other)
  {
    m_buffer          = other.m_buffer;
    m_consoleOutput   = other.m_consoleOutput;
    m_spaceSeperated  = other.m_spaceSeperated;
    m_type            = other.m_type;
  }
  
  return *this;
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug& Debug::space()
{ 
  m_spaceSeperated = true; 
  return maybeSpace(); 
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug& Debug::nospace() 
{ 
  m_spaceSeperated = false; 
  return *this; 
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
Debug& Debug::maybeSpace() 
{ 
  if (m_spaceSeperated)
  {
    *m_buffer << " ";
  }
  
  return *this; 
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

EGE_NAMESPACE_END